
services:
  api-server:
    build:
      context: .
      dockerfile: ./Dockerfile-prod
    platform: linux/amd64
    container_name: spring
    restart: always
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/test_ddl?useSSL=true&verifyServerCertificate=true&requireSSL=true
#      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/test_ddl?useSSL=false
#      SPRING_DATASOURCE_USERNAME: "root"
#      SPRING_DATASOURCE_PASSWORD: "1234"
    ports:
      - "18666:8443"
    depends_on:
      - cache-server
      - database
    networks:
      - raccon_world

  cache-server:
    image: redis
    container_name: redis
    ports:
      - "18663:6379"
    networks:
      - raccon_world

  database:
    image: mysql:8.0.36
    container_name: mysql
    environment:
      MYSQL_DATABASE: test_ddl
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: 1234
    ports:
      - "18665:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - raccon_world

  nginx:
    build:
      context: ../raccon_FE
      dockerfile: ./Dockerfile  # 위에서 만든 Dockerfile로 빌드
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"  # HTTPS 포트도 열기
    depends_on:
      - api-server
    volumes:
#      - /etc/letsencrypt:/etc/letsencrypt  # 인증서 파일을 저장할 경로
#      - /var/lib/letsencrypt:/var/lib/letsencrypt
    networks:
      - raccon_world

#  certbot:
#    image: certbot/certbot
#    volumes:
#      - /etc/letsencrypt:/etc/letsencrypt
#      - /var/lib/letsencrypt:/var/lib/letsencrypt
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $!; done;'"
#    container_name: certbot
#    networks:
#      - racconworld_world

networks:
  raccon_world:
    name: raccon_world
    driver: bridge
    external: false